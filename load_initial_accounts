#!/usr/bin/env python3
# Copyright (C) 2021 Corexalys.
#
# This file is part of rs3f.
#
# rs3f is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# rs3f is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with rs3f.  If not, see <https://www.gnu.org/licenses/>.
import json
import os.path
import pwd
import shutil
import subprocess

from rs3f_common import UIDS_PATH, get_home_path, get_jail_path


def main():
    if not os.path.exists(UIDS_PATH):
        print("No containers defined yet.")
        return
    with open(UIDS_PATH) as uids:
        uid_name_mapping = json.loads(uids.read())

    existing_accounts = {pw.pw_uid for pw in pwd.getpwall()}

    for uid, name in uid_name_mapping.items():
        print(f"Checking {uid} ({name}):")
        home = get_home_path(name)
        chroot = get_jail_path(name)
        print("  - Ensuring account exists...")
        if int(uid) in existing_accounts:
            print(f"    Account {uid} ({name}) already exists")
        else:
            subprocess.run(
                [
                    "adduser",
                    "--no-create-home",
                    "--home",
                    home,
                    "--disabled-password",
                    "--gecos",
                    f"rs3f container {name}",
                    "--uid",
                    str(uid),
                    "--gid",
                    "999",
                    "--quiet",
                    name,
                ],
                check=True,
            )
            print("    Created account")
        print("  - Ensuring correct permissions...")
        # Home
        os.chown(home, 0, 0)
        os.chmod(home, 0o755)
        os.chown(os.path.join(home, ".ssh"), int(uid), 0)
        os.chmod(os.path.join(home, ".ssh"), 0o700)
        os.chown(os.path.join(home, ".ssh/authorized_keys"), int(uid), 0)
        os.chmod(os.path.join(home, ".ssh/authorized_keys"), 0o600)
        # Jail
        os.chown(chroot, 0, 0)
        os.chmod(chroot, 0o755)
        for dirpath, _, filenames in os.walk(os.path.join(chroot, "gocryptfs_root")):
            os.chown(dirpath, int(uid), 0)
            os.chmod(dirpath, 0o700)
            for filename in filenames:
                filepath = os.path.join(dirpath, filename)
                os.chown(filepath, int(uid), 0)
                os.chmod(filepath, 0o600)
    print("DONE")


if __name__ == "__main__":
    main()
